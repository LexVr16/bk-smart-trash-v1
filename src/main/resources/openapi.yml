openapi: 3.0.1
info:
  title: API Smart Trash V1
  description: API para la automatización de recolección de basura
  version: 1.0.0

servers:
  - url: http://localhost:7071

paths:
  /users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - User
      operationId: getUsers
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/create:
    post:
      summary: Crear un nuevo usuario
      tags:
        - User
      operationId: postCreateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener un usuario por ID
      tags:
        - User
      operationId: getUserById
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
  /users/{userId}/update:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de usuario por ID
      tags:
        - User
      operationId: userUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
  /users/{userId}/delete:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de usuario por ID
      tags:
        - User
      operationId: userDeleteById
      responses:
        '204':
          description: Usuario eliminado correctamente
        '404':
          description: Usuario no encontrado
  /communities:
    get:
      summary: Obtener todas las communidades
      tags:
        - Community
      operationId: getCommunities
      responses:
        '200':
          description: Lista de communidades obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
  /communities/create:
    post:
      summary: Crear una nueva Comunidad
      tags:
        - Community
      operationId: postCreateCommunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Community creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: ID único del usuario (clave primaria)
        dni:
          type: string
          description: Número de documento de identidad del usuario
          pattern: "^[0-9]{8}$"
        name:
          type: string
          description: Nombres del usuario
        lastname:
          type: string
          description: Apellidos del usuario
        email:
          type: string
          format: email
          pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
          description: Dirección de correo electrónico del usuario
        phone_number:
          type: string
          description: Número de teléfono
          pattern: "^[0-9]{9}$"
        password:
          type: string
          format: password
          description: Contraseña del usuario (almacenada como VARBINARY en la base de datos)
        user_type:
          type: string
          description: Tipo de Usuario
        community_id:
          type: integer
          description: ID unico de la comunidad
          pattern: '^\d+$'
      required:
        - userId
        - dni
        - email
        - phone_number
        - password
        - community_id
    Community:
      type: object
      properties:
        community_id:
          type: integer
          description: ID unico de la comunidad
        communityName:
          type: string
          description: Nombre de la comunidad
          example: "AA.HH. EL MILAGRO"
        address:
          type: string
          description: Dirección de la comunidad
          example: "Av. Principal s/n"
      required:
        - community_id
        - communityName
        - address
