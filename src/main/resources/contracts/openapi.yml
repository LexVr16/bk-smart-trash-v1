openapi: 3.0.1
info:
  title: API Smart Trash V1
  description: API para la automatización de recolección de basura
  version: 1.0.0

servers:
  - url: http://localhost:7071

paths:
  /communities:
    get:
      summary: Obtener todas las communidades
      tags:
        - Community
      operationId: getAllCommunities
      responses:
        '200':
          description: Lista de communidades obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
  /communities/create:
    post:
      summary: Crear una nueva Comunidad
      tags:
        - Community
      operationId: postCreateCommunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Comunidad creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
  /communities/{communityId}:
    parameters:
      - in: path
        name: communityId
        required: true
        description: ID de la Comunidad a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener una comunidad por ID
      tags:
        - Community
      operationId: getCommunityById
      responses:
        '200':
          description: Comunidad obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Comunidad no encontrado
  /communities/{communityId}/update:
    parameters:
      - in: path
        name: communityId
        required: true
        description: ID de la Comunidad a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de Comunidad por ID
      tags:
        - Community
      operationId: communityUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Comunidad actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Comunidad no encontrado
  /communities/{communityId}/delete:
    parameters:
      - in: path
        name: communityId
        required: true
        description: ID de la Comunidad a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de Comunidad por ID
      tags:
        - Community
      operationId: communityDeleteById
      responses:
        '204':
          description: Comunidad eliminado correctamente
        '404':
          description: Comunidad no encontrado
  /users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - User
      operationId: getAllUsers
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/login:
    post:
      summary: Inicio de sesión del usuario
      tags:
        - User
      operationId: postLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Inicio de sesión exitoso
        '401':
          description: Credenciales incorrectas
        '500':
          description: Error interno del servidor
  /users/create:
    post:
      summary: Crear un nuevo usuario
      tags:
        - User
      operationId: postCreateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener un usuario por ID
      tags:
        - User
      operationId: getUserById
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
  /users/{userId}/update:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de usuario por ID
      tags:
        - User
      operationId: userUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
  /users/{userId}/delete:
    parameters:
      - in: path
        name: userId
        required: true
        description: ID del usuario a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de usuario por ID
      tags:
        - User
      operationId: userDeleteById
      responses:
        '204':
          description: Usuario eliminado correctamente
        '404':
          description: Usuario no encontrado
  /truks:
    get:
      summary: Obtener todos los camiones
      tags:
        - Truk
      operationId: getAllTruks
      responses:
        '200':
          description: Lista de Camiones obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Truk'
  /truks/create:
    post:
      summary: Crear un nuevo Camión
      tags:
        - Truk
      operationId: postCreateTruk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Truk'
      responses:
        '201':
          description: Camión creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truk'
  /truks/{truk_id}:
    parameters:
      - in: path
        name: truk_id
        required: true
        description: ID del camión a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener un camión por ID
      tags:
        - Truk
      operationId: getTrukById
      responses:
        '200':
          description: Camión obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truk'
        '404':
          description: Camión no encontrado
  /truks/{trukId}/update:
    parameters:
      - in: path
        name: trukId
        required: true
        description: ID del camión a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de camión por ID
      tags:
        - Truk
      operationId: trukUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Truk'
      responses:
        '200':
          description: Camión actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truk'
        '404':
          description: Camión no encontrado
  /truks/{trukId}/delete:
    parameters:
      - in: path
        name: trukId
        required: true
        description: ID del camión a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de usuario por ID
      tags:
        - Truk
      operationId: trukDeleteById
      responses:
        '204':
          description: Camión eliminado correctamente
        '404':
          description: Camión no encontrado
  /assignments:
    get:
      summary: Obtener todos los asignaciones
      tags:
        - Assignment
      operationId: getAllAssignments
      responses:
        '200':
          description: Lista de asignaciones obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
  /assignments/create:
    post:
      summary: Crear un nuevo asignación
      tags:
        - Assignment
      operationId: postCreateAssignments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '201':
          description: Asignación creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
  /assignments/{assignmentId}:
    parameters:
      - in: path
        name: assignmentId
        required: true
        description: ID del asignación a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener un asignación por ID
      tags:
        - Assignment
      operationId: getAssignmentById
      responses:
        '200':
          description: Asignación obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Asignación no encontrado
  /assignments/{assignmentId}/update:
    parameters:
      - in: path
        name: assignmentId
        required: true
        description: ID del asignación a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de asignación por ID
      tags:
        - Assignment
      operationId: assignmentUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '200':
          description: Asignación actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Asignación no encontrado
  /assignments/{assignmentId}/delete:
    parameters:
      - in: path
        name: assignmentId
        required: true
        description: ID del asignación a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de asignación por ID
      tags:
        - Assignment
      operationId: assignmentDeleteById
      responses:
        '204':
          description: Asignación eliminado correctamente
        '404':
          description: Asignación no encontrado
  /notifications:
    get:
      summary: Obtener todos los notificaciones
      tags:
        - Notification
      operationId: getAllNotifications
      responses:
        '200':
          description: Lista de notificaciones obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications/{communityId}/notify:
    parameters:
      - in: path
        name: communityId
        required: true
        description: ID de la comunidad necesario para notificar
        schema:
          type: string
    post:
      summary: Notificar a todos los usuarios en base a la comunidad
      tags:
        - Notification
      operationId: postSendNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Se registró correctamente las notificaciones
          content:
            application/json:
              schema:
                type: integer
        '500':
          description: Error interno del servidor
  /notifications/create:
    post:
      summary: Crear un nuevo notificacion
      tags:
        - Notification
      operationId: postCreateNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Notificación creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notifications/{notificationId}:
    parameters:
      - in: path
        name: notificationId
        required: true
        description: ID del notificación a actualizar o eliminar
        schema:
          type: string
    get:
      summary: Obtener un notificación por ID
      tags:
        - Notification
      operationId: getNotificationById
      responses:
        '200':
          description: Notificación obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notificación no encontrado
  /notifications/{notificationId}/update:
    parameters:
      - in: path
        name: notificationId
        required: true
        description: ID del notificación a actualizar o eliminar
        schema:
          type: string
    put:
      summary: Actualización de notificación por ID
      tags:
        - Notification
      operationId: NotificationUpdateById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Notificación actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notificación no encontrado
  /notifications/{notificationId}/delete:
    parameters:
      - in: path
        name: notificationId
        required: true
        description: ID del notificación a actualizar o eliminar
        schema:
          type: string
    delete:
      summary: Eliminación de notificación por ID
      tags:
        - Notification
      operationId: notificationDeleteById
      responses:
        '204':
          description: Notificación eliminado correctamente
        '404':
          description: Notificación no encontrado
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          description: ID único del usuario
        dni:
          type: string
          description: Número de documento de identidad del usuario
          pattern: "^[0-9]{8}$"
        name:
          type: string
          description: Nombres del usuario
        lastName:
          type: string
          description: Apellidos del usuario
        address:
          type: string
          description: Dirección del usuario
          example: "Av. Principal s/n"
        email:
          type: string
          format: email
          pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
          description: Dirección de correo electrónico del usuario
        phoneNumber:
          type: string
          description: Número de teléfono
          pattern: "^[0-9]{9}$"
        password:
          type: string
          format: password
          description: Contraseña del usuario (almacenada como VARBINARY en la base de datos)
        userType:
          type: string
          description: Tipo de Usuario
          pattern: ^(administrador|conductor|residente)$
        community_id:
          type: integer
          description: ID unico de la comunidad
      required:
        - userId
        - dni
        - email
        - phoneNumber
        - password
        - community_id
    Community:
      type: object
      properties:
        communityId:
          type: integer
          description: ID unico de la comunidad
        communityName:
          type: string
          description: Nombre de la comunidad
          example: "AA.HH. EL MILAGRO"
      required:
        - communityId
        - communityName
    Truk:
      type: object
      properties:
        trukId:
          type: integer
          description: ID unico de camión
        plaque:
          type: string
          description: Identificación de la placa del camión
        model:
          type: string
          description: modelo del camión
        status:
          type: string
          description: Estado en el que se encuentra el camión
          example: "disponible"
          pattern: ^(disponible|en_ruta|reparación)$
      required:
        - trukId
        - plaque
        - status
    Assignment:
      type: object
      properties:
        assignmentId:
          type: integer
          description: ID unico de asignación
        userId:
          type: integer
          description: ID único del usuario
        trukId:
          type: integer
          description: ID unico de camión
        communityId:
          type: integer
          description: ID unico de la comunidad
        assignmentDate:
          type: string
          format: date
          description: Fecha de la asignación
        assignmentHour:
          type: string
          format: time
          description: Hora de la asignación
      required:
        - assignmentId
        - userId
        - trukId
        - communityId
        - assignmentDate
        - assignmentHour
    Notification:
      type: object
      properties:
        notificationId:
          type: integer
          description: ID unico de la notificación
        trukId:
          type: integer
          description: ID unico de camión
        communityId:
          type: integer
          description: ID unico de la comunidad
        userId:
          type: integer
          description: ID único del usuario
        notificationDate:
          type: string
          format: date
          description: Fecha de la notificación
        notificationHour:
          type: string
          format: time
          description: Hora de la notificación
        message:
          type: string
          description: Mensaje de la notificación